if (bgm$boxes$boundary[i]){
wire3d(aa, col = "black")
} else {
shade3d(aa, col = rainbow(nrow(bgm$boxes))[i], alpha =0.5, specular = "black")
}
}
wire3d(topomesh, alpha = 0.5)
library(rgl)
quadlines <- function(x, ...) {
lines3d(t(x$vb[, as.vector(rbind(x$ib,x$ib[1,], NA_real_))]), ...)
}
quadlines(topomesh,  alpha = 0.6)
## devtools::install_github("mdsumner/rbgm")
library(rbgm)
## example data set in package
fname <- system.file("extdata", "Antarctica_28.bgm", package = "rbgm")
bgm <- read_bgm(fname)
plot(boxSpatial(bgm), col = grey(seq(0, 1, length = nrow(bgm$boxes)), alpha = 0.5))
##  bgm format doesn't know which boxes are boundary
bgm$boxes$boundary <- boxSpatial(bgm)$boundary
library(dplyr)
## table of polygon topology
tab0 <- bgm$boxes  %>% select(.bx0)  %>% inner_join(bgm$boxesXverts)  %>% inner_join(bgm$vertices)   %>% select(x, y, .bx0)
## prepare in polygon format
NAdf <- data_frame(x = NA_real_, y = NA_real_)
tab <- head(do.call(bind_rows, lapply(split(tab0, tab0$.bx0), bind_rows, NAdf)), -1)
## tools to get raster topography
library(raadtools)
topo <- readtopo("etopo2")
topo <- crop(topo, extent(spTransform(boxSpatial(bgm), projection(topo))))
## resize a raster by nn sampling
deci <- function(x, fact = 10) {
y <- raster(x); res(y) <- res(y) * fact
setValues(y, extract(x, coordinates(y)))
}
dem <- deci(topo, 4)
## vertical exaggeration
ex <- 40
## raster as a quadmesh
topomesh <- gris::quadmeshFromRaster(dem, dem)
topomesh$vb[1:3, ] <- t(gris::llh2xyz(t(topomesh$vb[1:3, ]), exag = ex))
library(rgl
for (i in seq(nrow(bgm$boxes))) {
x <- bgm$boxes[i, ]  %>% select(.bx0)  %>% inner_join(bgm$boxesXverts)  %>% inner_join(bgm$vertices)   %>% select(x, y, .bx0)
aa <- extrude3d(x$x, x$y, thickness = bgm$boxes$botz[i])
xyz <- t(aa$vb[1:3, ])
xyz[,1:2] <- rgdal::project(xyz[,1:2], proj = bgm$extra["projection"], inv = TRUE)
aa$vb[1:3,] <- t(gris::llh2xyz(xyz, exag = ex))
if (bgm$boxes$boundary[i]){
wire3d(aa, col = "black")
} else {
shade3d(aa, col = rainbow(nrow(bgm$boxes))[i], alpha =0.5, specular = "black")
}
}
)
quadlines <- function(x, ...) {
lines3d(t(x$vb[, as.vector(rbind(x$ib,x$ib[1,], NA_real_))]), ...)
}
quadlines(topomesh,  alpha = 0.6)
library(rgl)
for (i in seq(nrow(bgm$boxes))) {
x <- bgm$boxes[i, ]  %>% select(.bx0)  %>% inner_join(bgm$boxesXverts)  %>% inner_join(bgm$vertices)   %>% select(x, y, .bx0)
aa <- extrude3d(x$x, x$y, thickness = bgm$boxes$botz[i])
xyz <- t(aa$vb[1:3, ])
xyz[,1:2] <- rgdal::project(xyz[,1:2], proj = bgm$extra["projection"], inv = TRUE)
aa$vb[1:3,] <- t(gris::llh2xyz(xyz, exag = ex))
if (bgm$boxes$boundary[i]){
wire3d(aa, col = "black")
} else {
shade3d(aa, col = rainbow(nrow(bgm$boxes))[i], alpha =0.5, specular = "black")
}
}
)
quadlines <- function(x, ...) {
lines3d(t(x$vb[, as.vector(rbind(x$ib,x$ib[1,], NA_real_))]), ...)
}
quadlines(topomesh,  alpha = 0.6)
## devtools::install_github("mdsumner/rbgm")
library(rbgm)
## example data set in package
fname <- system.file("extdata", "Antarctica_28.bgm", package = "rbgm")
bgm <- read_bgm(fname)
plot(boxSpatial(bgm), col = grey(seq(0, 1, length = nrow(bgm$boxes)), alpha = 0.5))
##  bgm format doesn't know which boxes are boundary
bgm$boxes$boundary <- boxSpatial(bgm)$boundary
library(dplyr)
## table of polygon topology
tab0 <- bgm$boxes  %>% select(.bx0)  %>% inner_join(bgm$boxesXverts)  %>% inner_join(bgm$vertices)   %>% select(x, y, .bx0)
## prepare in polygon format
NAdf <- data_frame(x = NA_real_, y = NA_real_)
tab <- head(do.call(bind_rows, lapply(split(tab0, tab0$.bx0), bind_rows, NAdf)), -1)
## tools to get raster topography
library(raadtools)
topo <- readtopo("etopo2")
topo <- crop(topo, extent(spTransform(boxSpatial(bgm), projection(topo))))
## resize a raster by nn sampling
deci <- function(x, fact = 10) {
y <- raster(x); res(y) <- res(y) * fact
setValues(y, extract(x, coordinates(y)))
}
dem <- deci(topo, 4)
## vertical exaggeration
ex <- 40
## raster as a quadmesh
topomesh <- gris::quadmeshFromRaster(dem, dem)
topomesh$vb[1:3, ] <- t(gris::llh2xyz(t(topomesh$vb[1:3, ]), exag = ex))
library(rgl)
for (i in seq(nrow(bgm$boxes))) {
x <- bgm$boxes[i, ]  %>% select(.bx0)  %>% inner_join(bgm$boxesXverts)  %>% inner_join(bgm$vertices)   %>% select(x, y, .bx0)
aa <- extrude3d(x$x, x$y, thickness = bgm$boxes$botz[i])
xyz <- t(aa$vb[1:3, ])
xyz[,1:2] <- rgdal::project(xyz[,1:2], proj = bgm$extra["projection"], inv = TRUE)
aa$vb[1:3,] <- t(gris::llh2xyz(xyz, exag = ex))
if (bgm$boxes$boundary[i]){
wire3d(aa, col = "black")
} else {
shade3d(aa, col = rainbow(nrow(bgm$boxes))[i], alpha =0.5, specular = "black")
}
}
)
quadlines <- function(x, ...) {
lines3d(t(x$vb[, as.vector(rbind(x$ib,x$ib[1,], NA_real_))]), ...)
}
quadlines(topomesh,  alpha = 0.6)
library(rbgm)
library(rbgm)
files <- list.files(system.file("extdata/bgm", package = "bgmfiles"), pattern = "bgm$",
full.names = TRUE)
for (i in seq_along(files)) {
b <- read_bgm(files[i])
}
i
files[i]
x <- files[i]
tx <- readLines(x)
facesInd <- grep("^face", tx)
boxesInd <- grep("^box", tx)
bnd_vertInd <- grep("^bnd_vert", tx)
## all comments
hashInd <- grep("^#", tx)
## unique starting tokens
ust <- sort(unique(unlist(lapply(strsplit(tx[-c(facesInd, boxesInd, bnd_vertInd, hashInd)], "\\s+"), "[", 1))))
ust <- ust[nchar(ust) > 0]
extra <- lapply(ust, function(x) gsub("\\s+$", "", gsub("^\\s+", "", gsub(x, "", grep(x, tx, value = TRUE)))))
names(extra) <- ust
## some (most?) .bgm have PROJ.4 strings without "+" denoting arguments
extra$projection <- fixproj(extra$projection)  # <- sprintf("+%s", gsub(" ", " +", extra["projection"]))
extra$projection <- rbgm:::fixproj(extra$projection)  # <- sprintf("+%s", gsub(" ", " +", extra["projection"]))
extra
faceslist <- grepItems(tx[facesInd], "face", as.numeric(extra["nface"]))
faceslist <- rbgm:::grepItems(tx[facesInd], "face", as.numeric(extra["nface"]))
facesind
facesInd
faceslist <- grepItems(tx[facesInd], "face", as.numeric(extra["nface"]))
faceslist <- rbgm:::grepItems(tx[facesInd], "face", as.numeric(extra["nface"]))
tx[facesInd][1:10]
files[i]
tx <- gsub("\t", " ", tx)
## all indexes
facesInd <- grep("^face", tx)
boxesInd <- grep("^box", tx)
bnd_vertInd <- grep("^bnd_vert", tx)
## all comments
hashInd <- grep("^#", tx)
## unique starting tokens
ust <- sort(unique(unlist(lapply(strsplit(tx[-c(facesInd, boxesInd, bnd_vertInd, hashInd)], "\\s+"), "[", 1))))
ust <- ust[nchar(ust) > 0]
extra <- lapply(ust, function(x) gsub("\\s+$", "", gsub("^\\s+", "", gsub(x, "", grep(x, tx, value = TRUE)))))
names(extra) <- ust
## some (most?) .bgm have PROJ.4 strings without "+" denoting arguments
extra$projection <- fixproj(extra$projection)  # <- sprintf("+%s", gsub(" ", " +", extra["projection"]))
extra$projection <- rbgm:::fixproj(extra$projection)  # <- sprintf("+%s", gsub(" ", " +", extra["projection"]))
faceslist <- rbgm:::grepItems(tx[facesInd], "face", as.numeric(extra["nface"]))
tx[facesInd][1:10]
head(facesInd)
faceslist <- rbgm:::grepItems(tx[facesInd[1:10]], "face", as.numeric(extra["nface"]))
as.numeric(extra["nface"])
extra
numfaces <- as.numeric(strsplit(extra["nface"], "\\s+")[[1]][1])
strsplit(extra["nface"], "\\s+")
strsplit(extra["nface"], " ")
extra["nface"]
extra["nface"][[1]]
numfaces <- as.numeric(strsplit(extra["nface"][[1]], "\\s+")[[1]][1])
numfaces
faceslist <- grepItems(tx[facesInd], "face", numfaces)
faceslist <- rbgm:::grepItems(tx[facesInd], "face", numfaces)
library(rbgm)
library(testthat)
context("basic-bgm")
files <- list.files(system.file("extdata/bgm", package = "bgmfiles"), pattern = "bgm$",
full.names = TRUE)
test_that("read_bgm works", {
expect_that(
read_bgm(files[1])
, is_a("list"))
expect_silent(lapply(files, read_bgm))
})
for (i in seq_along(files)) {
b <- read_bgm(files[i])
test_that("conversion to Spatial works", {
expect_that(boxSpatial(b), is_a("SpatialPolygonsDataFrame"))
expect_that(faceSpatial(b), is_a("SpatialLinesDataFrame"))
expect_that(boundarySpatial(b), is_a("SpatialPolygonsDataFrame"))
}
)
}
fixproj <- function(x) {
## split on space
ss <- strsplit(x[1], "\\s+")[[1]]
paste(unlist(lapply(ss, prependplus)), collapse = " ")
}
fixproj("proj=utm + zone=55 + datum = WGS84 +units=m +no_defs")
prependplus <- function(x) {
if (!grepl("^\\+", x)) {
x <- sprintf("+%s", x)
}
x
}
fixproj("proj=utm + zone=55 + datum = WGS84 +units=m +no_defs")
fixproj <- function(x) {
## split on space
ss <- strsplit(x[1], "\\s+")[[1]]
# #remove any extraneous plus
ss <- ss[!ss == "+"]
paste(unlist(lapply(ss, prependplus)), collapse = " ")
}
fixproj("proj=utm + zone=55 + datum = WGS84 +units=m +no_defs")
x <- "proj=utm + zone=55 + datum = WGS84 +units=m +no_defs"
x
ss <- strsplit(x[1], "\\s+")[[1]]
ss
ss <- gsub("+", "", x)
ss
ss <- gsub("\\+", "", x)
ss
ss <- gsub("\\+", "", x)
## collapse any space around "="
ss <- gsub("\\s+=", "=", ss)
ss <- gsub("=\\s+", "=", ss)
ss
ss <- gsub("\\s+", " ", ss)
ss
fixproj <- function(x) {
## split on space
#ss <- strsplit(x[1], "\\s+")[[1]]
## remove all "+"
ss <- gsub("\\+", "", x)
## collapse any space around "="
ss <- gsub("\\s+=", "=", ss)
ss <- gsub("=\\s+", "=", ss)
ss <- gsub("\\s+", " ", ss)
paste(unlist(lapply(ss, prependplus)), collapse = " ")
}
prependplus <- function(x) {
if (!grepl("^\\+", x)) {
x <- sprintf("+%s", x)
}
x
}
fixproj("proj=aea lat_1=-18 lat_2=-36 lat_0=0 lon_0=134 x_0=3000000 y_0=6000000 ellps=GRS80 towgs84=0,0,0,0,0,0,0 units=m no_defs")
fixproj <- function(x) {
## remove all "+"
ss <- gsub("\\+", "", x[1])
## collapse any space around "="
ss <- gsub("\\s+=", "=", ss)
ss <- gsub("=\\s+", "=", ss)
ss <- gsub("\\s+", " ", ss)
## split on space
ss <- strsplit(ss, "\\s+")[[1]]
paste(unlist(lapply(ss, prependplus)), collapse = " ")
}
prependplus <- function(x) {
if (!grepl("^\\+", x)) {
x <- sprintf("+%s", x)
}
x
}
fixproj("proj=aea lat_1=-18 lat_2=-36 lat_0=0 lon_0=134 x_0=3000000 y_0=6000000 ellps=GRS80 towgs84=0,0,0,0,0,0,0 units=m no_defs")
fixproj("+proj=longlat +a=6378137.0 +es=0.0066943799901413165 +lon_0=0d00 +lat_0=0d00 +x_0=0.0 +y_0=0.0")
fixproj("proj=utm + zone=55 + datum = WGS84 +units=m +no_defs")
library(rbgm)
library(rbgm)
library(rbgm)
library(rbgm)
install.packages("graticule")
library(rbgm)
context("reading bgm")
namenumber <- function(x) {
x <- unlist(lapply(strsplit(x, "\\."), "[", 1))
as.integer(gsub("[[:alpha:]]|[[:punct:]]", "", x))
}
removetrailing <- function(x) gsub("\\s+$", "", x)
removeleading <- function(x) gsub("^\\s+", "", x)
singlespace <- function(x) gsub("\\s+", " ", x)
addnewline <- function(x) sprintf("%s\n", x)
library(dplyr)
files <- bgmfiles::bgmfiles()
basetoks <- c("#", "bnd_vert", "box.area", "box.botz", "box.horizmix", "box.ibox",
"box.iface", "box.inside", "box.label", "box.nconn", "box.vert",
"box.vertmix", "face.cs", "face.length", "face.lr", "face.p",
"maxwcbotz", "nbox", "nface", "projection")
test_that("known tokens are always the same", {
## this test
## removes leading and trailing whitespace
## converts all whitespace to single spaces (including tabs, not include new lines)
## splits every line in the file on " " and lists the unique first tokens and sorts them
## compares that list to basetoks above
## if this test fails it may mean we have a new kind of file
## with a new bit of information
## or without something the other files have
for (i in seq_along(files)) {
f <- files[i]
d <- data_frame(tx = readLines(f))
xtoks <- sort(unique(unlist(lapply(strsplit(singlespace(removetrailing(removeleading(d$tx))), " "), function(x) gsub("[[:digit:]]", "", x[1L])))))
testthat::expect_that(xtoks, testthat::is_identical_to(basetoks))
}
})
i
files
xtoks
i
f <- files[i]
d <- data_frame(tx = readLines(f))
xtoks <- sort(unique(unlist(lapply(strsplit(singlespace(removetrailing(removeleading(d$tx))), " "), function(x) gsub("[[:digit:]]", "", x[1L])))))
xtoks
basetoks
grep("^##", xtoks)
-grep("^##", xtoks)
grep("^##[[:alpha:]]", xtoks)
library(rbgm)
xtoks
basetoks
f <- files[i]
d <- data_frame(tx = readLines(f))
xtoks <- sort(unique(unlist(lapply(strsplit(singlespace(removetrailing(removeleading(d$tx))), " "), function(x) gsub("[[:digit:]]", "", x[1L])))))
xtoks
xtoks <- xtoks[-grep("^##[[:alpha:]]", xtoks)]
xtoks
basetoks
cbind(xtoks, basetoks)
xtoks == basetoks
library(rbgm)
for (i in seq_along(files)) {
f <- files[i]
d <- data_frame(tx = readLines(f))
xtoks <- sort(unique(unlist(lapply(strsplit(singlespace(removetrailing(removeleading(d$tx))), " "), function(x) gsub("[[:digit:]]", "", x[1L])))))
## remove any lines that start with "##T"
xtoks <- xtoks[-grep("^##[[:alpha:]]", xtoks)]
print(all(xtoks == basetoks))
#testthat::expect_that(xtoks, testthat::is_identical_to(basetoks))
}
xtoks
basetoks
for (i in seq_along(files)) {
f <- files[i]
d <- data_frame(tx = readLines(f))
xtoks <- sort(unique(unlist(lapply(strsplit(singlespace(removetrailing(removeleading(d$tx))), " "), function(x) gsub("[[:digit:]]", "", x[1L])))))
## remove any lines that start with "##T"
xtoks <- xtoks[-grep("^##[[:alpha:]]", xtoks)]
print(all(xtoks == basetoks))
#testthat::expect_that(xtoks, testthat::is_identical_to(basetoks))
}
f <- files[i]
d <- data_frame(tx = readLines(f))
xtoks <- sort(unique(unlist(lapply(strsplit(singlespace(removetrailing(removeleading(d$tx))), " "), function(x) gsub("[[:digit:]]", "", x[1L])))))
## remove any lines that start with "##T"
xtoks <- xtoks[-grep("^##[[:alpha:]]", xtoks)]
xtoks
library(dplyr)
files <- bgmfiles::bgmfiles()
basetoks <- c("#", "bnd_vert", "box.area", "box.botz", "box.horizmix", "box.ibox",
"box.iface", "box.inside", "box.label", "box.nconn", "box.vert",
"box.vertmix", "face.cs", "face.length", "face.lr", "face.p",
"maxwcbotz", "nbox", "nface", "projection")
f <- files[i]
d <- data_frame(tx = readLines(f))
xtoks <- sort(unique(unlist(lapply(strsplit(singlespace(removetrailing(removeleading(d$tx))), " "), function(x) gsub("[[:digit:]]", "", x[1L])))))
## remove any lines that start with "##T"
xtoks <- xtoks[-grep("^##[[:alpha:]]", xtoks)]
print(all(xtoks == basetoks))
#testthat::expect_that(xtoks, testthat::is_identical_to(basetoks))
xtoks
basetoks
xtoks == basetoks
xtoks <- sort(unique(unlist(lapply(strsplit(singlespace(removetrailing(removeleading(d$tx))), " "), function(x) gsub("[[:digit:]]", "", x[1L])))))
xtoks
grep("^##[[:alpha:]]", xtoks)
xtoks
library(rbgm)
library(rbgm)
verts <- function(x, type, app) {
x1 <- grep(sprintf("^%s[0-9]+.%s\\s", type, app), x, value = TRUE)
x2 <- singlespace(x1)
x3 <- removetrailing(x2)
x4 <- removeleading(x3)
x5 <- addnewline(x4)
x6 <- setNames(read.delim(text = x5, sep= " ", header = FALSE, stringsAsFactors = FALSE), c("name", "x", "y"))
x6$number <- namenumber(x6$name)
as_data_frame(x6)
}
bverts <- verts(d$tx, "box", "vert")
bverts
f1verts
f1verts <- verts(d$tx, "face", "p1")
f2verts <- verts(d$tx, "face", "p2")
f1verts
f2verts
bndverts <- verts(d$tx, "bnd_vert", "")
head(d$tx)
head(d$tx, 16)
dotvertlines <- function(x, type, app) {
grep(sprintf("^%s[0-9]+.%s\\s", type, app), x, value = TRUE)
}
vertlines <- function(x, type) {
grep(sprintf("^%s", type, app), x, value = TRUE)
}
verts <- function(x, type, app = "") {
x1 <- if (app = "") {vertlines(x, type)}  else {x <- dotvertlines(x, type, app)}
x2 <- singlespace(x1)
x3 <- removetrailing(x2)
x4 <- removeleading(x3)
x5 <- addnewline(x4)
x6 <- setNames(read.delim(text = x5, sep= " ", header = FALSE, stringsAsFactors = FALSE), c("name", "x", "y"))
x6$number <- namenumber(x6$name)
as_data_frame(x6)
}
bverts <- verts(d$tx, "box", "vert")
f1verts <- verts(d$tx, "face", "p1")
f2verts <- verts(d$tx, "face", "p2")
bndverts <- verts(d$tx, "bnd_vert", "")
dotvertlines <- function(x, type, app) {
grep(sprintf("^%s[0-9]+.%s\\s", type, app), x, value = TRUE)
}
vertlines <- function(x, type) {
grep(sprintf("^%s", type, app), x, value = TRUE)
}
verts <- function(x, type, app = "") {
x1 <- if (app = "") {vertlines(x, type)}  else {x <- dotvertlines(x, type, app)}
x2 <- singlespace(x1)
x3 <- removetrailing(x2)
x4 <- removeleading(x3)
x5 <- addnewline(x4)
x6 <- setNames(read.delim(text = x5, sep= " ", header = FALSE, stringsAsFactors = FALSE), c("name", "x", "y"))
x6$number <- namenumber(x6$name)
as_data_frame(x6)
}
bverts <- verts(d$tx, "box", "vert")
f1verts <- verts(d$tx, "face", "p1")
f2verts <- verts(d$tx, "face", "p2")
bndverts <- verts(d$tx, "bnd_vert", "")
verts <- function(x, type, app = "") {
x1 <- if (app == "") {vertlines(x, type)}  else {x <- dotvertlines(x, type, app)}
x2 <- singlespace(x1)
x3 <- removetrailing(x2)
x4 <- removeleading(x3)
x5 <- addnewline(x4)
x6 <- setNames(read.delim(text = x5, sep= " ", header = FALSE, stringsAsFactors = FALSE), c("name", "x", "y"))
x6$number <- namenumber(x6$name)
as_data_frame(x6)
}
bverts <- verts(d$tx, "box", "vert")
f1verts <- verts(d$tx, "face", "p1")
f2verts <- verts(d$tx, "face", "p2")
bndverts <- verts(d$tx, "bnd_vert", "")
dotvertlines <- function(x, type, app) {
grep(sprintf("^%s[0-9]+.%s\\s", type, app), x, value = TRUE)
}
vertlines <- function(x, type) {
grep(sprintf("^%s", type), x, value = TRUE)
}
verts <- function(x, type, app = "") {
x1 <- if (app == "") {vertlines(x, type)}  else {x <- dotvertlines(x, type, app)}
x2 <- singlespace(x1)
x3 <- removetrailing(x2)
x4 <- removeleading(x3)
x5 <- addnewline(x4)
x6 <- setNames(read.delim(text = x5, sep= " ", header = FALSE, stringsAsFactors = FALSE), c("name", "x", "y"))
x6$number <- namenumber(x6$name)
as_data_frame(x6)
}
bverts <- verts(d$tx, "box", "vert")
f1verts <- verts(d$tx, "face", "p1")
f2verts <- verts(d$tx, "face", "p2")
bndverts <- verts(d$tx, "bnd_vert", "")
bverts
f1verts
f2verts
bndverts
dotvertlines <- function(x, type, app) {
grep(sprintf("^%s[0-9]+.%s\\s", type, app), x, value = TRUE)
}
vertlines <- function(x, type) {
grep(sprintf("^%s", type), x, value = TRUE)
}
verts <- function(x, type, app = "") {
x1 <- if (app == "") {vertlines(x, type)}  else {x <- dotvertlines(x, type, app)}
x2 <- singlespace(x1)
x3 <- removetrailing(x2)
x4 <- removeleading(x3)
x5 <- addnewline(x4)
x6 <- setNames(read.delim(text = x5, sep= " ", header = FALSE, stringsAsFactors = FALSE), c("name", "x", "y"))
if (!app == "") x6$number <- namenumber(x6$name)
as_data_frame(x6)
}
bverts <- verts(d$tx, "box", "vert")
f1verts <- verts(d$tx, "face", "p1")
f2verts <- verts(d$tx, "face", "p2")
bndverts <- verts(d$tx, "bnd_vert", "")
bndverts
library(rbgm)
library(rbgm)
