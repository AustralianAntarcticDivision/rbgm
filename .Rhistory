plot(fut, col = pal$cols, breaks = pal$breaks, legend = FALSE)
v <- values(tr); v <- na.omit(v[v > 0])
contour(focal(tr, matrix(1, 9)), add = TRUE, level = seq(0.1, 1, by = 0.15))
plot(tr)
plot(tr > 0)
plot(tr > 0.2)
plot(tr > 0.1)
contour(focal(tr, matrix(1, 9)) > 0.1, add = TRUE)
focal(tr, matrix(1, 9)) > 0.1
plot(focal(tr, matrix(1, 9)) > 0.1)
contour(focal(tr, matrix(1, 9)) > 0.1, add = TRUE, level = 1)
contour(focal(tr, matrix(1, 9)) > 0.1, add = TRUE, level = 1, labels = NA)
contour(focal(tr, matrix(1, 16)) > 0.1, add = TRUE, level = 1, labels = NA)
contour(focal(tr, matrix(1, 15)) > 0.1, add = TRUE, level = 1, labels = NA)
fut <- calc(read_dchl(max(tdates) + seq(1, 5) * 24 * 3600), mean, na.rm = TRUE)
plot(fut, col = pal$cols, breaks = pal$breaks, legend = FALSE)
v <- values(tr); v <- na.omit(v[v > 0])
contour(focal(tr, matrix(1, 15)) > 0.1, add = TRUE, level = 1, labels = NA)
plot(fut, col = pal$cols, breaks = pal$breaks, legend = FALSE)
plot(tr, col = tcols, brks = tbrks)
plot(tr, col = tcols, brks = tbrks, zlim = c(0.001, 1
))
plot(tr, col = tcols, brks = tbrks, zlim = c(0.001, 0.5)
)
plot(tr, col = tcols, brks = tbrks, zlim = c(0.001, 0.2))
plot(tr, col = tcols, brks = tbrks)
a
plot(tr, col = tcols, brks = tbrks)
maps::map(add = T)
plot(wrld_simpl, add = T)
library(maptools)
data(wrld_simpl)
plot(wrld_simpl, add = T)
a <- read_dchl(max(tdates) + seq(1, 5) * 24 * 3600),
a <- read_dchl(max(tdates) + seq(1, 5) * 24 * 3600)
a
plot(fut, col = pal$cols, breaks = pal$breaks, legend = FALSE)
plot(a, col = pal$cols, breaks = pal$breaks, legend = FALSE)
plot(fut, col = pal$cols, breaks = pal$breaks, legend = FALSE)
plot(stack(a, fut), col = pal$cols, breaks = pal$breaks, legend = FALSE)
plot(fut, col = pal$cols, breaks = pal$breaks, legend = FALSE)
plot(tr, col = tcols, brks = tbrks, add = T)
plot(stack(a, fut), col = pal$cols, breaks = pal$breaks, legend = FALSE)
library(rbgm)
devtools::install_github("mdsumner/gris")
library(rbgm)
x <- system.file("extdata/EastAntarctica_LL.bgm", package = "rbgm")
str(x)
r <- read_bgm(system.file("extdata/EastAntarctica_LL.bgm", package = "rbgm"))
library(rbgm)
r <- read_bgm(system.file("extdata/EastAntarctica_LL.bgm", package = "rbgm"))
r$boxdata
library(rbgm)
r <- read_bgm(system.file("extdata/EastAntarctica_LL.bgm", package = "rbgm"))
library(rbgm)
r <- read_bgm(system.file("extdata/EastAntarctica_LL.bgm", package = "rbgm"))
library(rbgm)
r <- read_bgm(system.file("extdata/EastAntarctica_LL.bgm", package = "rbgm"))
f$boxdata$botz
r$boxdata$botz
str(r$boxdata)
library(bgmfiles)
bfile <- sample(bgmfiles(), 1L)
bgm <- bgmfile(bfile)
library(rbgm)
bgm <- bgmfile(bfile)
library(tibble)
bgm
plot(bgm$vertices)
plot(bgm$vertices %>% select(x, y))
library(dplyr)
plot(bgm$vertices %>% select(x, y))
bgm$boundaryvertices
lines(bgm$boundaryvertices)
plot(boxSpatial(bgm))
points(bgm$vertices %>% select(x, y))
lines(bgm$boundaryvertices)
lines(bgm$boundaryvertices, col = "red")
x <- bfile
tx <- readLines(x)
library(rbenchmark)
benchmark(readLines(x), readr::read_file(bfile))
tx <- readLines(x)
ty <- readr::read_file(x)
identify(tx, ty)
identical(tx, ty)
str(tx)
str(ty)
length(ty)
length(tx)
?readr::read_file
strsplit(ty, "\n")
tyy <- unlist(strsplit(ty, "\n"))
str(tyy)
tx <- readLines(x)
tx <- unlist(strsplit(readr::read_file(x), "\n"))
system.time(tx <- readLines(x))
system.time(tx <- unlist(strsplit(readr::read_file(x), "\n")))
stringr::str_split("a\nb")
stringr::str_split("a\nb", "\n")
system.time(tx <- readLines(x))
system.time(tx <- strsplit(readr::read_file(x), "\n")[[1]])
system.time(tx <- readLines(x))
system.time(tx <- strsplit(readr::read_file(x), "\n")[[1]])
system.time(tx <- readLines(x))
system.time(tx <- strsplit(readr::read_file(x), "\n")[[1]])
system.time(tx <- stringr::str_split(readr::read_file(x), "\n")[[1]])
system.time(tx <- readLines(x))
system.time(tx <- stringr::str_split(readr::read_file(x), "\n")[[1]])
stringr::str_match("abc", "b")
stringr::str_detect("abc", "b")
stringr::str_detect(c("dog", "abc", "b")
stringr::str_detect(c("dog", "abc"), "b")
stringr::str_locate(c("dog", "abc"), "b")
stringr::str_detect
?stringr::str_detect
## all indexes
facesInd <- grep("^face", tx)
facesInd <- stringr::st_detect("^face", tx)
facesInd <- stringr::str_detect("^face", tx)
str(facesInd)
facesInd <- stringr::str_detect("^face", tx)
head(warnings())
facesInd <- stringr::str_detect(tx, "^face")
sum(facesInd)
str(facesInd)
## all indexes
facesInd <- grep("^face", tx)
afacesInd <- stringr::str_detect(tx, "^face")
str(facesInd)
head(which(afacesInd))
system.time(bgmfile(bfile))
system.time(bgmfile(bfile))
devtools::load_all(".")
system.time(bgmfile(bfile))
devtools::load_all(".")
system.time(bgmfile(bfile))
library(rbgm)
system.time(bgmfile(bfile))
devtools::load_all(".")
system.time(bgmfile(bfile))
devtools::load_all(".")
system.time(bgmfile(bfile))
head(bnd_vertInd)
lapply(strsplit(tx[bnd_vertInd], "\\s+"), function(x) as.numeric(x[-1]))
x <- bfile
if (nchar(x) < 1) stop("file path is empty string")
if (!file.exists(x)) mess <- stop(sprintf("no file found '%s'\n", x))
#system.time(tx <- readLines(x))
tx <- stringr::str_split(readr::read_file(x), "\n")[[1]]
nch <- length(tx)
if (nch == 0) {
stop(sprintf("no lines found in file %s", x))
}
## all indexes
#  facesInd <- grep("^face", tx)
facesInd <- which(stringr::str_detect(tx, "^face"))
# boxesInd <- grep("^box", tx)
boxesInd <- which(stringr::str_detect(tx, "^box"))
#  bnd_vertInd <- grep("^bnd_vert", tx)
bnd_vertInd <- which(stringr::str_detect(tx, "^bnd_vert"))
## all comments
#  hashInd <- grep("^#", tx)
hashInd <- which(stringr::str_detect(tx, "^#"))
## unique starting tokens
ust <- sort(unique(unlist(lapply(strsplit(tx[-c(facesInd, boxesInd, bnd_vertInd, hashInd)], "\\s+"), "[", 1))))
ust <- ust[nchar(ust) > 0]
extra <- lapply(ust, function(x) gsub("\\s+$", "", gsub("^\\s+", "", gsub(x, "", grep(x, tx, value = TRUE)))))
names(extra) <- ust
## some (most?) .bgm have PROJ.4 strings without "+" denoting arguments
extra$projection <- fixproj(extra$projection)  # <- sprintf("+%s", gsub(" ", " +", extra["projection"]))
## numfaces by declaration in the file
numfaces <- as.numeric(strsplit(extra["nface"][[1]], "\\s+")[[1]][1])
## actual numfaces is
actual_numfaces <- length(unique(unlist(lapply(strsplit(tx[facesInd], "\\."), "[", 1L))))
if (!numfaces == actual_numfaces) {
cat(sprintf("%s \nfile declares %i faces but contains data for %i faces\n\n ... returning all %i faces", x, numfaces, actual_numfaces, actual_numfaces))
}
faceslist <- grepItems(tx[facesInd], "face", actual_numfaces)
## remove len, cs, lr from faceparse, all belong on the face not the face verts
faceverts <-  dplyr::bind_rows(lapply(seq_along(faceslist), function(xi) {a <- facevertsparse(faceslist[[xi]]); a$.fx0 <- xi - 1; a}))
ls()
str(tx)
str(facesInd)
head(tx)
writeLines(head(tx, 100))
ust
## unique starting tokens
ust <- sort(unique(unlist(lapply(strsplit(tx[-c(facesInd, boxesInd, bnd_vertInd, hashInd)], "\\s+"), "[", 1))))
library(stringr)
str_extract(tx, "^face")
str_extract(tx, "^face [0-9]{?}")
str_extract(tx, "face [0-9]{?}")
grep("face", tx, value = TRUE)[1]
grep("face", tx, value = TRUE)[10]
grep("face", tx, value = TRUE)[100]
str_extract(tx, "face[0-9]")
str_extract(tx, "face[0-9].")
str_extract(tx, "^face")
length(tx)
str_extract(tx, "^face.")
tx[1000]
tx[2000]
tx[100]
tx[400]
tx[800]
tx[7000]
tx[801]
tx[7001]
tx[6999]
tx[6998]
str_detect(tx, "face[0-9]{1,}")
sum(str_detect(tx, "face[0-9]{1,}"))
tx[str_detect(tx, "face[0-9]{1,}")]
str_subset(tx, "face[0-9]{1,}")
str_subset(tx, "face[0-9]{1,}\\.p1")
readr::read_table(str_subset(tx, "face[0-9]{1,}\\.p1"))
str_subset(tx, "face[0-9]{1,}\\.p1")
readr::read_delim(str_subset(tx, "face[0-9]{1,}\\.p1"), delim = " ")
?readr::read_delim
readr::read_delim(str_subset(tx, "face[0-9]{1,}\\.p1"), delim = " ", col_names = FALSE)
read.table(str_subset(tx, "face[0-9]{1,}\\.p1"), sep = " ")
read.table(text = str_subset(tx, "face[0-9]{1,}\\.p1"), sep = " ")
read.table(text = str_subset(tx, "face[0-9]{1,}\\.p1"), sep = " ", colClasses = c("character", "numeric", "numeric"))
str_subset(tx, "face[0-9]{1,}\\.p1")
read_delim( "face0.p1 3733659.561792654 3132479.532784405" )
library(readr)
read_delim( "face0.p1 3733659.561792654 3132479.532784405" )
read_delim( "face0.p1 3733659.561792654 3132479.532784405" , delim = "\\s")
read_delim( "face0.p1 3733659.561792654 3132479.532784405" , delim = " ")
read_delim( rep("face0.p1 3733659.561792654 3132479.532784405", 2) , delim = " ")
read.table(text = paste(str_subset(tx, "face[0-9]{1,}\\.p1"), collapse = "\n"), sep = " ", colClasses = c("character", "numeric", "numeric"))
read_delim(paste(str_subset(tx, "face[0-9]{1,}\\.p1"), collapse = "\n"), delim = " ")
read_delim(paste(str_subset(tx, "face[0-9]{1,}\\.p1"), collapse = "\n"), delim = " ", col_names = c("face", "x0", "y0"))
grep("^face", tx)[1:10]
grep("^face", tx, value = T)[1:10]
devtools::load_all(".")
faces_parse(tx)
devtools::load_all(".")
faces_parse(tx)
bgm
devtools::load_all(".")
read_bgm(bfile)
grep("^box", tx, value = T)
x <- grep("^box", tx, value = T)
strsplit(x, "\\t")
strsplit(x, "\\s+")
unlist(lapply(strsplit(x, "\\s+"), "[", 1))
unique(unlist(lapply(strsplit(x, "\\s+"), "[", 1)))
unique(unlist(lapply(strsplit(x, "\\s+"), "[", 1)))[1:10]
unique(unlist(lapply(strsplit(x, "\\s+"), "[", 1)))[1:10]
x[1:10]
read_delim_pattern(tx, "box[0-9]{1,}\\.label", col_names = c("label"))
read_delim_pattern(tx, "box[0-9]{1,}\\.nconn", col_names = c("nconn"))
tx <- gsub("\\t", " ")
tx <- gsub("\\t", " ", tx)
read_delim_pattern(tx, "box[0-9]{1,}\\.label", col_names = c("label"))
p1 <- read_delim_pattern(tx, "box[0-9]{1,}\\.label", col_names = c("box", "label"))
p1
p2 <- read_delim_pattern(tx, "box[0-9]{1,}\\.nconn", col_names = c("box", "nconn"))
len <- read_delim_pattern(tx, "box[0-9]{1,}\\.length", col_names = c("box", "length"))
inside <- read_delim_pattern(tx, "box[0-9]{1,}\\.inside", col_names = c("box", "inside"))
inside <- read_delim_pattern(tx, "box[0-9]{1,}\\.inside", col_names = c("box", "insideX", "insideY"))
vert <- read_delim_pattern(tx, "box[0-9]{1,}\\.vert", col_names = c("box", "X", "Y"))
vert <- read_delim_pattern(tx, "box[0-9]{1,}\\.vert ", col_names = c("box", "X", "Y"))
vert
devtools::load_all(".")
read_bgm(bfile)
x <- bfile
#system.time(tx <- readLines(x))
tx <- readr::read_file(x)
tx <- gsub("\\t", " ", tx)
faces_parse(tx)
boxes_parse(tx)
p1 <- read_delim_pattern(tx, "face[0-9]{1,}\\.p1", col_names = c("face", "x1", "y1")) %>% dplyr::mutate(face = gsub("\\.p1", "", face))
pattern = "face[0-9]{1,}\\.p1
""
str_subset(tx, pattern)
pattern = "face[0-9]{1,}\\.p1"
str_subset(tx, pattern)
pattern
devtools::load_all(".")
read_bgm(bfile)
devtools::load_all(".")
x
#system.time(tx <- readLines(x))
tx <- unlist(strsplit(readr::read_file(x), "\n"))
length(tx)
read_delim(paste(str_subset(tx, pattern), collapse = "\n"), delim = " ", col_names = col_names)
read_delim(paste(str_subset(tx, pattern), collapse = "\n"), delim = " ", col_names = F)
p1 <- read_delim_pattern(tx, "face[0-9]{1,}\\.p1", col_names = c("face", "x1", "y1")) %>% dplyr::mutate(face = gsub("\\.p1", "", face))
p2 <- read_delim_pattern(tx, "face[0-9]{1,}\\.p2", col_names = c("face", "x2", "y2"))
len <- read_delim_pattern(tx, "face[0-9]{1,}\\.length", col_names = c("face", "length"))
cs <- read_delim_pattern(tx, "face[0-9]{1,}\\.cs", col_names = c("face", "cosine", "sine"))
lr <- read_delim_pattern(tx, "face[0-9]{1,}\\.lr", col_names = c("face", "left", "right"))
bind_cols(p1, p2[, -1], len[, -1], cs[, -1], lr[, -1])
label <- read_delim_pattern(tx, "box[0-9]{1,}\\.label", col_names = c("box", "label"))
pattern = "box[0-9]{1,}\\.label"
str_subset(tx, pattern)
tx <- gsub("\\t", " ", tx)
label <- read_delim_pattern(tx, "box[0-9]{1,}\\.label", col_names = c("box", "label"))
inside <- read_delim_pattern(tx, "box[0-9]{1,}\\.inside", col_names = c("box", "insideX", "insideY"))
nconn <- read_delim_pattern(tx, "box[0-9]{1,}\\.nconn", col_names = c("box", "nconn"))
# iface <- read_delim_pattern(tx, "box[0-9]{1,}\\.iface)
# ibox
botz <- read_delim_pattern(tx, "box[0-9]{1,}\\.botz", col_names = c("box", "botz"))
area <- read_delim_pattern(tx, "box[0-9]{1,}\\.area", col_names = c("box", "area"))
vertmix <- read_delim_pattern(tx, "box[0-9]{1,}\\.vertmix", col_names = c("box", "vertmix"))
horizmix <- read_delim_pattern(tx, "box[0-9]{1,}\\.horizmix", col_names = c("box", "horizmix"))
vert <- read_delim_pattern(tx, "box[0-9]{1,}\\.vert ", col_names = c("box", "X", "Y"))
bind_cols(label, inside[,-1], nconn[, -1], botz[, -1], area[, -1], vertmix[, -1], horizmix[, -1], vert[, -1])
labe
label
inside
ncoon
nconn
botz
area
vertmix
horizmix
vert
grep("vert", tx, value = T)
grep("vert ", tx, value = T)
tail(grep("vert ", tx, value = T))
vert <- read_delim_pattern(tx, "vert ", col_names = c("vert", "X", "Y"))
vert
distinct(vert, vert)
read_delim_pattern(tx, "vert ", col_names = c("vert", "X", "Y")) %>% mutate(vert = gsub("\\.vert", "", vert))
file.show(bfile)
str_subset(tx, "iface")
str_subset(tx, "box[0-9]{1,}.iface")
lapply(strsplit(str_subset(tx, "box[0-9]{1,}.iface"), " "), function(x) tibble::tibble(name = x[1], iface = as.integer(x[-1])))
iface_parse <- function(tx) {
bind_rows(lapply(strsplit(str_subset(tx, "box[0-9]{1,}.iface"), " "), function(x) tibble::tibble(name = x[1], iface = as.integer(x[-1])))) %>%
mutate(name = gsub("\\.iface", "", name))
}
devtools::load_all(".")
read_bgm(bfile)
devtools::load_all(".")
read_bgm(bfile)
label <- read_delim_pattern(tx, "box[0-9]{1,}\\.label", col_names = c("box", "label")) %>% mutate(box = gsub("\\.label", "", box))
devtools::load_all(".")
read_bgm(bfile)
bgm <- bgmfile(bfile)
bgm
x
x <- read_bgm(x)
devtools::load_all(".")
make_faces(x$face)
tab <- x$face
tab
tab[, c("x1", "y1", "x2", "y2")]
purrr:::transpose(tab[, c("x1", "y1", "x2", "y2")])
split(tab[, c("x1", "y1", "x2", "y2")], tab$face)
lapply(split(tab[, c("x1", "y1", "x2", "y2")], tab$face), function(x) sf::st_linestring(matrix(unlist(x), ncol = 2, byrow = TRUE)))
devtools::load_all(".")
make_faces(x$face)
make_boxes(x$box)
x$box
make_boxes(x$verts)
devtools::load_all(".")
make_boxes(x$verts)
make_boundary(x$verts)
devtools::load_all(".")
make_boundary(x$verts)
bgm_as_sf(x)
devtools::load_all(".")
devtools::load_all(".")
bgm_as_sf(x)
library(sf)
bgm_as_sf(x)
devtools::load_all(".")
bgm_as_sf(x)
devtools::load_all(".")
bgm_as_sf(x)
d <- tibble::tibble(name = c(x$face$face, x$box$box, "boundary"))
d
sf::st_sfc(make_faces(x$face), make_boxes(x$verts), make_boundary(x$verts))
make_faces(x$face)
make_boxes(x$verts)
make_boundary(x$verts)
devtools::load_all(".")
d[["geometry"]] <- do.call(sf::st_sfc, list(make_faces(x$face), make_boxes(x$verts), make_boundary(x$verts)))
d[["geometry"]] <- do.call(c, list(make_faces(x$face), make_boxes(x$verts), make_boundary(x$verts)))
d[["geometry"]] <- c(make_faces(x$face), make_boxes(x$verts), list(make_boundary(x$verts))))
d[["geometry"]] <- c(make_faces(x$face), make_boxes(x$verts), list(make_boundary(x$verts)))
sf::st_as_sf(d)
d[["geometry"]] <- sf::st_sfc(make_faces(x$face), make_boxes(x$verts), list(make_boundary(x$verts)))
d[["geometry"]] <- sf::st_sfc(c(make_faces(x$face), make_boxes(x$verts), list(make_boundary(x$verts))))
sf::st_as_sf(d)
devtools::load_all(".")
bfile
x
bgm_as_sf(x)
ss <- bgm_as_sf(x)
plot(ss)
plot(ss[grepl("face", ss$name)])
plot(ss[grepl("face", ss$name), ])
plot(ss[grepl("face", ss$name), ], lwd = 2)
plot(ss[grepl("face", ss$name), ], lwd = 6)
a <- bgmfiles::bgmfiles()[1]
a
devtools::load_all(".")
read_bgm(a)
library(stringr)
read_bgm(a)
library(readr)
read_bgm(a)
devtools::load_all(".")
read_bgm(a)
library(rbgm)
a <- bgmfiles::bgmfiles()[1]
a
bgm <- bgmfile(a)
devtools::load_all(".")
bgm <- bgmfile(a)
bgm$extra
tx <- readLines(a)
purrr::map(c("maxwcbotz", "nbox", "nface", "projection"), function(a) grep(a, tx))
purrr::map(c("maxwcbotz", "nbox", "nface", "projection"), function(a) grep(a, tx, value = TRUE))
purrr::map(c("maxwcbotz", "nbox", "nface", "projection"),
function(a) gsub(a, "", grep(a, tx, value = TRUE)))
tags <- c("maxwcbotz", "nbox", "nface", "projection")
stats::setNames(purrr::map(tags,
function(a) gsub(a, "", grep(a, tx, value = TRUE))), tags)
tibble::as_tibble(stats::setNames(purrr::map(tags,
function(a) gsub(a, "", grep(a, tx, value = TRUE))), tags))
tibble::as_tibble(lapply(stats::setNames(purrr::map(tags,
function(a) gsub("^\\s+", "", gsub(a, "", grep(a, tx, value = TRUE))), tags)), type.convert)))
tibble::as_tibble(lapply(stats::setNames(purrr::map(tags,
function(a) gsub("^\\s+", "", gsub(a, "", grep(a, tx, value = TRUE))), tags)), type.convert))
tibble::as_tibble(lapply(stats::setNames(purrr::map(tags,
function(a) gsub("^\\s+", "", gsub(a, "", grep(a, tx, value = TRUE)))), tags), type.convert))
tibble::as_tibble(lapply(stats::setNames(purrr::map(tags,
function(a) gsub("^\\s+", "", gsub(a, "", grep(a, tx, value = TRUE)))),
tags), type.convert, as.is = TRUE))
devtools::load_all(".")
a
read_bgm(a)
devtools::load_all(".")
read_bgm(a)
read_bgm(a)$meta$projection
devtools::load_all(".")
library(rbgm)
library(bgmfiles)
f <- bgmfiles()[5]
library(rbgm)
d <- read_bgm(f)
d <- bgmfile(f)
args(bgmfile)
usethis::use_packages("stringr")
usethis::use_package("stringr")
usethis::use_package("readr")
?shiny::shinyApp
library(shiny); source('~/app-copy.R')
library(rbgm)
library(bgmfiles)
bgmfiles("antarctica_28")
roms_files <- cpolarfiles()
library(raadtools)
roms_files <- cpolarfiles()
library(rbgm)
library(bgmfiles)
## abstract structure from BGM
bgm <- bgmfile(bgmfiles("antarctica_28"))
roms_files <- raadtools::cpolarfiles()
romsdata(roms_files$fullname[1], varname = "w")
## spatial structure of boxes and faces
box <- boxSpatial(bgm)
face <- faceSpatial(bgm)
## map the spatial data to the ROMS grid
romsbox <- romsmap(roms_files$fullname[1], box)
?romsmap
rcoords <- romscoords(roms_files$fullname[1])
romsbox <- romsmap(box, rcoords)
romsface <- romsmap(face, rcoords)
plot(w1)
w1 <- romsdata(roms_files$fullname[1], varname = "w")
plot(w1)
plot(log(w1))
quantile(w1)
plot(w1, breaks = quantile(w1, 20))
plot(w1, breaks = quantile(w1))
plot(w1, breaks = quantile(w1), col = viridis::viridis(12))
plot(w1, col = viridis::viridis(12))
plot(crop(w1, romsbox[1, ]), col = viridis::viridis(12))
plot(romsbox, add = T)
plot(crop(w1), col = viridis::viridis(12))
plot(crop(w1, romsbox), col = viridis::viridis(12))
romsbox$label
plot(romsbox[2, ], add  = T)
library(raadtools)
roms_files <- cpolarfiles()
head(roms_files)
head(roms_files)
## abstract structure from BGM
bgm <- bgmfile(bgmfiles("antarctica_28"))
names(bgm)
box
face
plot(box)
## ROMS slice
library(angstroms)
w1 <- romsdata(roms_files$fullname[1], varname = "w")
w1
plot(w1)
plot(romsbox)
plot(w1)
plot(romsbox, add = T)
plot(crop(w1, romsbox))
plot(romsbox, add = T)
extract(w1, romsbox, fun = mean)
